require.define({"ep_comments_page/static/js/copyPasteEvents.js": {"(module ep_comments_page/static/js/copyPasteEvents.js)": function (require, exports, module) {"use strict";const _=require("underscore"),randomString=require("ep_etherpad-lite/static/js/pad_utils").randomString,shared=require("./shared");exports.addTextOnClipboard=(t,e,n,o,s,c)=>{let a,m;if(e.callWithAce(i=>{a=i.ace_getCommentIdOnFirstPositionSelected(),m=i.ace_hasCommentOnSelection()}),m){let i;const p=n.contents()[0].getSelection().getRangeAt(0),r=createHiddenDiv(p);let l=r;if(selectionHasOnlyText(r)){const C=r[0].textContent;l=buildHtmlToCopyWhenSelectionHasOnlyText(C,p,a)}const u=getCommentIds(l);i=buildCommentsData(l,s);const g=replaceCommentIdsWithFakeIds(i,l);i=JSON.stringify(i);let d=getReplyData(c,u);d=JSON.stringify(d),t.originalEvent.clipboardData.setData("text/objectReply",d),t.originalEvent.clipboardData.setData("text/objectComment",i),t.originalEvent.clipboardData.setData("text/html",g),t.preventDefault(),o&&n.contents()[0].execCommand("delete")}};const getReplyData=(t,e)=>{let n={};return _.each(e,o=>{n=_.extend(getRepliesFromCommentId(t,o),n)}),n},getRepliesFromCommentId=(t,e)=>{const n={};return _.each(t,(o,s)=>{o.commentId===e&&(n[s]=o)}),n},buildCommentIdToFakeIdMap=t=>{const e={};return _.each(t,(n,o)=>{const s=n.data.originalCommentId;e[s]=o}),e},replaceCommentIdsWithFakeIds=(t,e)=>{const n=buildCommentIdToFakeIdMap(t);return _.each(n,(s,c)=>{$(e).find(`.${c}`).removeClass(c).addClass(s)}),getHtml(e)},buildCommentsData=(t,e)=>{const n={},o=getCommentIds(t);return _.each(o,s=>{const c=generateFakeCommentId(),a=e[s];a.data.originalCommentId=s,n[c]=a}),n},generateFakeCommentId=()=>`fakecomment-${randomString(16)}`,getCommentIds=t=>{const e=$(t).find("span"),n=[];_.each(e,c=>{const a=$(c).attr("class"),m=/(?:^| )(c-[A-Za-z0-9]*)/.exec(a),i=m?m[1]:!1;i&&n.push(i)});const o=(c,a,m)=>m.indexOf(c)===a;return n.filter(o)},createHiddenDiv=t=>{const e=t.cloneContents(),n=document.createElement("div");return $(n).html(e)},getHtml=t=>$(t).html(),selectionHasOnlyText=t=>{const e=getHtml(t),n=htmlDecode(e),o=$(t).text();return n===o},buildHtmlToCopyWhenSelectionHasOnlyText=(t,e,n)=>{const o=buildHtmlWithTwoSpanTags(t,n),s=buildHtmlWithFormattingTagsOfSelection(o,e);return $.parseHTML(`<div>${s}</div>`)},buildHtmlWithFormattingTagsOfSelection=(t,e)=>{const n=e.commonAncestorContainer.parentNode,o=getTagsInSelection(n);return o&&(t=buildOpenTags(o)+t+buildCloseTags(o)),t},buildHtmlWithTwoSpanTags=(t,e)=>{const n=`<span class="comment ${e}">${t.slice(0,-1)}</span>`,o=`<span class="comment ${e}">${t.slice(-1)}</span>`;return n+o},buildOpenTags=t=>{let e="";return t.forEach(n=>{e+=`<${n}>`}),e},buildCloseTags=t=>{let e="";for(const n of t.slice().reverse())e+=`</${n}>`;return e},getTagsInSelection=t=>{const e=[];let n;for(;$(t)[0].localName!=="span";){const o=$(t).prop("outerHTML"),s=/<(b|i|u|s)>/.exec(o);n=s?s[1]:"",e.push(n),t=$(t).parent()}return e};exports.saveCommentsAndReplies=t=>{let e=t.originalEvent.clipboardData.getData("text/objectComment"),n=t.originalEvent.clipboardData.getData("text/objectReply");e&&n&&(e=JSON.parse(e),n=JSON.parse(n),saveComments(e),saveReplies(n))};const saveComments=t=>{const e={},n=clientVars.padId,o=pad.plugins.ep_comments_page.mapOriginalCommentsId,s=pad.plugins.ep_comments_page.mapFakeComments;_.each(t,(c,a)=>{const m=shared.generateCommentId();s[a]=m;const i=c.data.originalCommentId;o[i]=m,e[m]=c}),pad.plugins.ep_comments_page.saveCommentWithoutSelection(n,e)},saveReplies=t=>{const e={},n=clientVars.padId,o=pad.plugins.ep_comments_page.mapOriginalCommentsId;_.each(t,(s,c)=>{const a=s.commentId;s.commentId=o[a],e[c]=s}),pad.plugins.ep_comments_page.saveCommentReplies(n,e)},htmlDecode=t=>{const e=document.createElement("div");return e.innerHTML=t,e.childNodes.length===0?"":e.childNodes[0].nodeValue};exports.getCommentIdOnFirstPositionSelected=function(){const t=this.documentAttributeManager,e=this.rep;return _.object(t.getAttributesOnPosition(e.selStart[0],e.selStart[1])).comment},exports.hasCommentOnSelection=function(){let t;const e=this.documentAttributeManager,n=this.rep,o=n.selStart[0],s=n.selStart[1],c=n.selEnd[1],a=n.selEnd[0];return hasMultipleLineSelected(o,a)?t=hasCommentOnMultipleLineSel(o,a,n,e):t=hasCommentOnLine(o,s,c,e),t};const hasCommentOnMultipleLineSel=(t,e,n,o)=>{let s=!1;for(let c=t;c<=e&&!s;c++){const a=getFirstColumnOfSelection(c,n,t),m=getLastColumnOfSelection(c,n,e);hasCommentOnLine(c,a,m,o)&&(s=!0)}return s},getFirstColumnOfSelection=(t,e,n)=>t!==n?0:e.selStart[1],getLastColumnOfSelection=(t,e,n)=>{let o;return t!==n?o=getLength(t,e):o=e.selEnd[1]-1,o},hasCommentOnLine=(t,e,n,o)=>{let s=!1;for(let c=e;c<=n&&!s;c++)_.object(o.getAttributesOnPosition(t,c)).comment!==void 0&&(s=!0);return s},hasMultipleLineSelected=(t,e)=>t!==e,getLength=(t,e)=>{const n=t+1,o=e.lines.offsetOfIndex(t);return e.lines.offsetOfIndex(n)-o-1};
}}["(module ep_comments_page/static/js/copyPasteEvents.js)"],
});
